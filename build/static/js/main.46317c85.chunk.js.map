{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","click","value","BoardRow","Board","squares","slice","i","Fact","fact","Math","floor","random","length","Image","address","min","max","numImages","nextMove","image","alt","src","Game","state","Array","fill","this","setState","draw","win","winner","lines","a","b","c","line","nX","filter","x","nO","index","checkDrawWinner","endGame","squareClick","restartGame","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46317c85.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square (props) {\r\n    // Rendering the square button\r\n    return (\r\n        <button className=\"square\" onClick={props.click}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction BoardRow (props) {\r\n    return (\r\n        <div className=\"board-row\">\r\n            <Square value={props.value[0]} click={() => props.click(0)}/>\r\n            <Square value={props.value[1]} click={() => props.click(1)}/>\r\n            <Square value={props.value[2]} click={() => props.click(2)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Board (props) {\r\n    return (\r\n        <div className=\"game-board\">\r\n            <div>\r\n                <BoardRow value={props.squares.slice(0,3)} click={(i) => props.click(i)}/>\r\n                <BoardRow value={props.squares.slice(3,6)} click={(i) => props.click(3 + i)}/>\r\n                <BoardRow value={props.squares.slice(6,9)} click={(i) => props.click(6 + i)}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Fact (props) {\r\n    const fact = [\r\n        'Tic-tac-toe is called \"Jogo da Velha\" in Brazil, something that could be translated as \"The Game of the Old Woman\"',\r\n        'If the result is a tie, in Brazil, we call it \"Velha\" or \"Old Woman\" (free translation)',\r\n        'This game allows 91 distinct victories positions for \"X\", 44 for \"O\", and only 3 distinct draw positions',\r\n        'If played optimally by both players, the game always ends in a draw',\r\n        'In 1975, tic-tac-toe was used by MIT students to demonstrate the computational power of Tinkertoy elements.'\r\n    ];\r\n\r\n    return (\r\n        <div className=\"fact\">\r\n            {fact[Math.floor(Math.random() * fact.length)]}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Image (props) {\r\n    const address = [\r\n        // Xs\r\n        'https://media.giphy.com/media/jTemXLGfONHenS1icE/source.gif',\r\n        'https://media.giphy.com/media/133R3yNyjDea0U/source.gif',\r\n        'https://media.giphy.com/media/l2SpUXr2q90X1Pqgw/source.gif',\r\n        'https://media.giphy.com/media/Pnfb50o1UuTagM3KMG/source.gif',\r\n        // Os\r\n        'https://media.giphy.com/media/26AHvcW0LBkohdWJa/giphy.gif',\r\n        'https://media.giphy.com/media/83eQIMgNvkiY/giphy.gif',\r\n        'https://media.giphy.com/media/ugyC0Q2BoCbYs/giphy.gif',\r\n        'https://media.giphy.com/media/3oz8xTwbLrC75weLeM/giphy.gif',\r\n        // Tie\r\n        'https://media.giphy.com/media/JTE9xUEh90wheAAnPN/giphy.gif',\r\n        'https://media.giphy.com/media/mJzJSSrhNJGEJ8GYrH/giphy.gif',\r\n        'https://media.giphy.com/media/RMk32NEpSgcIoljwwz/giphy.gif',\r\n        'https://media.giphy.com/media/l0HU8MLXSjDXkEUGk/giphy.gif'\r\n    ];\r\n    \r\n    let min = 0;\r\n    let max = address.length;\r\n    const numImages = max / 3;\r\n\r\n    if (props.nextMove === 'X') max = numImages;\r\n    else if (props.nextMove === 'O') {\r\n        min = numImages;\r\n        max -= numImages;\r\n    } else min = max - numImages;\r\n\r\n    const image = Math.floor(Math.random() * (max - min) + min);\r\n\r\n    return (<img alt=\"\" src={address[image]}/>);\r\n}\r\n\r\nclass Game extends React.Component {\r\n    // Initializing next move to 'X'\r\n    // and all squares to null\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nextMove: 'X',\r\n            squares: Array(9).fill(null)\r\n        };\r\n    }\r\n\r\n    restartGame() {\r\n        this.setState({\r\n            nextMove: 'X',\r\n            squares: Array(9).fill(null)\r\n        });\r\n    }\r\n    \r\n    checkDrawWinner() {\r\n        const squares = this.state.squares;\r\n        let draw = true;\r\n        let win = false;\r\n        let winner = null;\r\n    \r\n        for (const [a, b, c] of this.props.lines) {\r\n            const line = [squares[a], squares[b], squares[c]];\r\n            const nX = line.filter(x => x === 'X').length;\r\n            const nO = line.filter(x => x === 'O').length;\r\n            // If a line has no 'X' or no 'O', NO DRAW\r\n            if (nX === 0 || nO === 0) draw = false;\r\n            // If a line has 3 'X' or 3 'O', Win!\r\n            if (nX === 3 || nO === 3) {\r\n                win = true;\r\n                winner = nX === 3 ? 'X' : 'O';\r\n                break;\r\n            }\r\n        }\r\n\r\n        return [win || draw, winner];\r\n    }\r\n\r\n    squareClick(index) {\r\n        const squares = this.state.squares;\r\n\r\n        if (squares[index] || this.checkDrawWinner()[0]) return;\r\n\r\n        const nextMove = this.state.nextMove === 'X' ? 'O' : 'X';\r\n        squares[index] = this.state.nextMove;\r\n\r\n        this.setState({ nextMove, squares });\r\n    }\r\n\r\n    render () {\r\n        const [endGame, winner] = this.checkDrawWinner();\r\n\r\n        return (<div>\r\n            <div className=\"title\">Jogo da Velha / Tic-tac-toe</div>\r\n            <div className=\"game-area\">\r\n                <div className=\"game\">\r\n                    <Board squares={this.state.squares} click={(i) => this.squareClick(i)}/>\r\n                    <div className=\"game-info\">\r\n                        {endGame ? (winner ? 'Winner:' : 'Draw / Deu Velha!') : 'Next Move:' }\r\n                        <br/>\r\n                        <Image nextMove={endGame ? winner : this.state.nextMove}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"restart\">\r\n                    <button className=\"restart-button\" onClick={() => this.restartGame()}>Restart Game</button>\r\n                </div>\r\n                <Fact/>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game lines={[[0, 1, 2],[3, 4, 5],[6, 7, 8],[0, 3, 6],[1, 4, 7],[2, 5, 8],[0, 4, 8],[2, 4, 6]]}/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}