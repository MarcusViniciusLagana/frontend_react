{"version":3,"sources":["index.js"],"names":["Square","props","style","winnerSquare","className","onClick","click","value","BoardRow","item","squares","map","square","index","winnerSquares","idx","toString","Board","squareRows","slice","winnerRows","row","squareRow","i","Fact","fact","Math","floor","random","length","Image","image","winner","nextMove","alt","src","History","move","Game","state","init","history","Array","fill","this","setState","draw","win","lines","a","b","c","line","nX","filter","x","nO","checkDrawWinner","concat","endGame","historyOptions","step","jumpTo","HomeScreen","restartGame","squareClick","React","Component","imgdivClass","btndivClass","imgClass","btnClass","divClass","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9da105ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square (props) {\r\n    let style = 'square';\r\n    if (props.winnerSquare) style += ' winner';\r\n    // Rendering the square button\r\n    return (\r\n        <button className={style} onClick={props.click}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction BoardRow (props) {\r\n    const squares = props.squares;\r\n    const item = squares.map((square, index) => \r\n        <Square key={'square-' + (3 * props.idx + index).toString()} value={square} click={() => props.click(index)} winnerSquare={props.winnerSquares[index]}/>);\r\n\r\n    return (\r\n        <div className=\"board-row\">\r\n            {item}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Board (props) {\r\n    const squareRows = [props.squares.slice(0, 3), props.squares.slice(3, 6), props.squares.slice(6, 9)];\r\n    const winnerRows = [props.winnerSquares.slice(0, 3), props.winnerSquares.slice(3, 6), props.winnerSquares.slice(6, 9)];\r\n    const row = squareRows.map((squareRow, index) => \r\n        <BoardRow key={'board-' + index.toString()} idx={index} squares={squareRow} click={i => props.click(3 * index + i)} winnerSquares={winnerRows[index]}/>);\r\n\r\n    return (\r\n        <div className=\"game-board\">\r\n            {row}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Fact (props) {\r\n    const fact = [\r\n        'Tic-tac-toe is called \"Jogo da Velha\" in Brazil, something that could be translated as \"The Game of the Old Woman\"',\r\n        'If the result is a tie, in Brazil, we call it \"Velha\" or \"Old Woman\" (free translation)',\r\n        'This game allows 91 distinct victories positions for \"X\", 44 for \"O\", and only 3 distinct draw positions',\r\n        'If played optimally by both players, the game always ends in a draw',\r\n        'In 1975, tic-tac-toe was used by MIT students to demonstrate the computational power of Tinkertoy elements.'\r\n    ];\r\n\r\n    return (\r\n        <div className=\"fact\">\r\n            {'Fast fact: ' + fact[Math.floor(Math.random() * fact.length)]}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Image (props) {\r\n    let image = './img/';\r\n\r\n    //const address = [\r\n    //    // Xs\r\n    //    'https://media.giphy.com/media/jTemXLGfONHenS1icE/source.gif',\r\n    //    'https://media.giphy.com/media/133R3yNyjDea0U/source.gif',\r\n    //    'https://media.giphy.com/media/l2SpUXr2q90X1Pqgw/source.gif',\r\n    //    'https://media.giphy.com/media/Pnfb50o1UuTagM3KMG/source.gif',\r\n    //    // Os\r\n    //    'https://media.giphy.com/media/26AHvcW0LBkohdWJa/giphy.gif',\r\n    //    'https://media.giphy.com/media/83eQIMgNvkiY/giphy.gif',\r\n    //    'https://media.giphy.com/media/ugyC0Q2BoCbYs/giphy.gif',\r\n    //    'https://media.giphy.com/media/3oz8xTwbLrC75weLeM/giphy.gif',\r\n    //    // Tie\r\n    //    'https://media.giphy.com/media/JTE9xUEh90wheAAnPN/giphy.gif',\r\n    //    'https://media.giphy.com/media/mJzJSSrhNJGEJ8GYrH/giphy.gif',\r\n    //    'https://media.giphy.com/media/RMk32NEpSgcIoljwwz/giphy.gif',\r\n    //    'https://media.giphy.com/media/l0HU8MLXSjDXkEUGk/giphy.gif'\r\n    //];\r\n    \r\n    //let min = 0;\r\n    //let max = address.length;\r\n    //const numImages = max / 3;\r\n\r\n    //if (props.nextMove === 'X') max = numImages;\r\n    //else if (props.nextMove === 'O') {\r\n    //    min = numImages;\r\n    //    max -= numImages;\r\n    //} else min = max - numImages;\r\n\r\n    if (props.winner) {\r\n        image += props.winner + '-W.webp';\r\n    } else {\r\n        if (props.nextMove) {\r\n            image += props.nextMove + '-' + Math.floor(Math.random() * 3) + '.webp';\r\n        } else {\r\n            image += 'V-' + Math.floor(Math.random() * 4) + '.webp';\r\n        }\r\n    }\r\n\r\n    //const image = Math.floor(Math.random() * (max - min) + min);\r\n\r\n    return (<img className={props.className} alt=\"Giphy\" src={image}/>);\r\n}\r\n\r\nfunction History (props) {\r\n    return(\r\n        <button onClick={props.onClick}>\r\n            {props.move ? 'Go to move #' + props.move : 'Go to game start'}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Game extends React.Component {\r\n    // Initializing next move to 'X'\r\n    // and all squares to null\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            init: true,\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                nextMove: 'X'\r\n            }],\r\n            move: 0\r\n        };\r\n    }\r\n\r\n    restartGame() {\r\n        this.setState({\r\n            init: false,\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                nextMove: 'X'\r\n            }],\r\n            move: 0\r\n        });\r\n    }\r\n    \r\n    checkDrawWinner() {\r\n        const history = this.state.history.slice(0, this.state.move + 1);\r\n        const squares = history[history.length - 1].squares;\r\n        const winnerSquares = Array(9).fill(false);\r\n        let draw = true;\r\n        let win = false;\r\n        let winner = null;\r\n    \r\n        for (const [a, b, c] of this.props.lines) {\r\n            const line = [squares[a], squares[b], squares[c]];\r\n            const nX = line.filter(x => x === 'X').length;\r\n            const nO = line.filter(x => x === 'O').length;\r\n            // If a line has no 'X' or no 'O', NO DRAW\r\n            if (nX === 0 || nO === 0) draw = false;\r\n            // If a line has 3 'X' or 3 'O', Win!\r\n            if (nX === 3 || nO === 3) {\r\n                win = true;\r\n                winner = nX === 3 ? 'X' : 'O';\r\n                winnerSquares[a] = true;\r\n                winnerSquares[b] = true;\r\n                winnerSquares[c] = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return [win || draw, winner, winnerSquares];\r\n    }\r\n\r\n    squareClick(index) {\r\n        const move = this.state.move + 1;\r\n        let history = this.state.history.slice(0, move);\r\n        const squares = history[history.length - 1].squares.slice();\r\n\r\n        if (squares[index] || this.checkDrawWinner()[0]) return;\r\n\r\n        const nextMove = history[history.length - 1].nextMove === 'X' ? 'O' : 'X';\r\n        squares[index] = history[history.length - 1].nextMove;\r\n\r\n        history = history.concat([{ squares, nextMove }]);\r\n\r\n        this.setState({ history, move });\r\n    }\r\n\r\n    jumpTo(move) {\r\n        this.setState({ move })\r\n    }\r\n\r\n    render () {\r\n        const history = this.state.history;\r\n        const [endGame, winner, winnerSquares] = this.checkDrawWinner();\r\n        const historyOptions = history.map((step, move) => <History key={move.toString()} onClick={() => this.jumpTo(move)} move={move}/>);\r\n\r\n        return (<>\r\n            <HomeScreen init={this.state.init} onClick={() => this.restartGame()}/>\r\n            <div className=\"title\">Jogo da Velha / Tic-tac-toe</div>\r\n            <div className=\"game-area\">\r\n                <div className=\"game\">\r\n                    <Board squares={history[this.state.move].squares} click={i => this.squareClick(i)} winnerSquares={winnerSquares}/>\r\n                    <div className=\"game-info\">\r\n                        {endGame ? (winner ? 'Winner:' : 'Draw / Deu Velha!') : 'Next Move:' }\r\n                        <br/>\r\n                        <Image className={endGame && winner ? 'winner' : 'img'} nextMove={endGame ? winner : history[this.state.move].nextMove} winner={winner}/>\r\n                        <br/>\r\n                        <div className=\"history\">\r\n                            {historyOptions}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"restart\">\r\n                    <button className=\"restart-button\" onClick={() => this.restartGame()}>Restart Game</button>\r\n                </div>\r\n                <Fact/>\r\n            </div>\r\n        </>);\r\n    }\r\n}\r\n\r\nfunction HomeScreen (props) {\r\n    let imgdivClass = 'init-img-div';\r\n    let btndivClass = 'init-btn-div';\r\n    let imgClass = 'initial-img';\r\n    let btnClass = 'restart-button';\r\n    let divClass = 'initial';\r\n    if (!props.init) {\r\n        imgdivClass += ' noPadding';\r\n        btndivClass += ' noPadding';\r\n        imgClass += ' trigger';\r\n        btnClass += ' trigger';\r\n        divClass += ' trigger';\r\n    }\r\n\r\n    return (\r\n        <div className={divClass}>\r\n            <div className={imgdivClass}>\r\n                <img className={imgClass} alt=\"Tic Tac Toe by Chameleon Design from the Noun Project\" src=\"./TicTacToe.png\"/>\r\n            </div>\r\n            * Tic Tac Toe icon by Chameleon Design from the Noun Project\r\n            <div className={btndivClass}>\r\n                <button className={btnClass} onClick={props.onClick}>START</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n    <Game lines={[[0, 1, 2],[3, 4, 5],[6, 7, 8],[0, 3, 6],[1, 4, 7],[2, 5, 8],[0, 4, 8],[2, 4, 6]]}/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}